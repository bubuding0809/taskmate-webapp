import type {
  GetServerSidePropsContext,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import {
  ClientSafeProvider,
  getCsrfToken,
  LiteralUnion,
  useSession,
} from "next-auth/react";
import { getProviders, signIn } from "next-auth/react";
import Head from "next/head";
import { BsFacebook, BsGoogle, BsDiscord } from "react-icons/bs";
import { IconBaseProps, IconType } from "react-icons";
import Link from "next/link";
import { ReactNode, useEffect, useState } from "react";
import { useRouter } from "next/router";
import Loader from "@/components/custom/Loader";
import { BuiltInProviderType } from "next-auth/providers";

const providerLogos: { [key: string]: IconType } = {
  Discord: BsDiscord,
  Facebook: BsFacebook,
  Google: BsGoogle,
};

const Register: NextPage = () => {
  const router = useRouter();
  const { data: sessionData, status } = useSession();

  const [providers, setProviders] = useState<Record<
    LiteralUnion<BuiltInProviderType, string>,
    ClientSafeProvider
  > | null>();
  const [csrfToken, setCsrfToken] = useState<string>("");

  useEffect(() => {
    if (sessionData) {
      void router.push("/dashboard");
    }
  }, [sessionData]);

  useEffect(() => {
    void getProviders()
      .then((providers) => setProviders(providers))
      .catch((err) => console.log(err));
    void getCsrfToken()
      .then((token) => setCsrfToken(token ?? ""))
      .catch((err) => console.log(err));
  }, []);

  if (status === "loading" || status === "authenticated") {
    return <Loader />;
  }

  return (
    <>
      <Head>
        <title>Taskmate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex min-h-screen flex-col items-center justify-center bg-blue-500">
        <div className="absolute flex w-auto space-y-8 overflow-hidden rounded-2xl  bg-white/75 px-6 py-8 shadow-sm ">
          <div>
            <h2 className="mt-5 text-center text-3xl font-bold tracking-tight text-gray-900">
              {" "}
              Create your Account
            </h2>
            <div>
              <p className="mt-2 text-center text-sm text-gray-600">
                Start planning in seconds, Already have an account?
                <Link
                  href="/auth/signin"
                  className="font-medium text-indigo-600 hover:text-indigo-500"
                >
                  {" "}
                  Login here
                </Link>
              </p>
            </div>

            <form
              className="mx-auto mt-10 max-w-xl sm:mt-5"
              onSubmit={(e) => {
                e.preventDefault();
                const form = e.target as HTMLFormElement;
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());

                fetch("/api/signup", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": csrfToken,
                  },
                  body: JSON.stringify(data),
                })
                  .then((res) => {
                    if (!res.ok) {
                      throw new Error("Error creating account");
                    }
                    if (res.ok) {
                      void router.push("/auth/signin").then(() => {
                        alert("Account created successfully");
                      });
                    }
                  })
                  .catch((err) => {
                    alert(err);
                  });
              }}
            >
              <div>
                <div className="grid grid-cols-2 gap-4">
                  <input
                    name="csrfToken"
                    type="hidden"
                    defaultValue={csrfToken}
                  />
                  <label
                    htmlFor="firstName"
                    className="text-m block font-semibold leading-6 text-gray-900"
                  >
                    Name:
                    <input
                      className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      name="name"
                      type="text"
                      placeholder="e.g Chen Yu"
                    />
                  </label>
                  <label
                    htmlFor="email"
                    className="grid-col-2 text-m block font-semibold leading-6 text-gray-900"
                  >
                    Email:
                    <input
                      className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      name="email"
                      type="email"
                      placeholder="name@gmail.com"
                    />
                  </label>
                  <label
                    htmlFor="password"
                    className="text-m block font-semibold leading-6 text-gray-900"
                  >
                    Password:
                    <input
                      className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      name="password"
                      type="password"
                      placeholder="Password"
                    />
                  </label>
                  <label
                    htmlFor="confirmPassword"
                    className="text-m block font-semibold leading-6 text-gray-900"
                  >
                    Confirm Password:
                    <input
                      className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                      name="confirmPassword"
                      type="password"
                      placeholder="Confirm Password"
                    />
                  </label>
                  {/* Segregation between credential and social */}
                </div>
                <div className="relative m-3 flex items-center ">
                  <div className="flex-grow border-t border-gray-600"></div>
                  <span className="mx-4 flex-shrink text-gray-600">
                    Or register with
                  </span>
                  <div className="flex-grow border-t border-gray-600"></div>
                </div>

                {/* Social Registration */}
                <div className="flex items-center justify-between">
                  {Object.values(providers ?? {})
                    .filter((provider) => provider.name !== "Credentials")
                    .map((provider) => {
                      const Logo = providerLogos[provider.name]!;
                      return (
                        <button
                          key={provider.name}
                          className="flex w-32 items-center justify-center gap-2 rounded-md border bg-white px-4 py-2 shadow hover:bg-gray-300/50"
                          onClick={() =>
                            void signIn(provider.id, {
                              callbackUrl: "/dashboard",
                            })
                          }
                        >
                          <Logo className="text-indigo-800" />
                          {provider.name}
                        </button>
                      );
                    })}
                </div>

                <button
                  className="mt-6 h-12 w-full rounded-md bg-indigo-600 py-1.5 px-1.5 text-white hover:bg-indigo-800 hover:text-gray-100 sm:leading-6"
                  type="submit"
                >
                  Create an account
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
};

export default Register;
