// Done By Chua Chen Yu 2101125

import type { NextPage } from "next";
import {
  ClientSafeProvider,
  getCsrfToken,
  LiteralUnion,
  useSession,
} from "next-auth/react";
import { getProviders, signIn } from "next-auth/react";
import Head from "next/head";
import { BsFacebook, BsGoogle, BsDiscord } from "react-icons/bs";
import { IconBaseProps, IconType } from "react-icons";
import Link from "next/link";
import { ReactNode, useEffect, useState, Fragment, useRef } from "react";
import { useRouter } from "next/router";
import Loader from "@/components/custom/Loader";
import { BuiltInProviderType } from "next-auth/providers";
import { Dialog, Transition } from "@headlessui/react";

const providerLogos: { [key: string]: IconType } = {
  Discord: BsDiscord,
  Facebook: BsFacebook,
  Google: BsGoogle,
};

const Register: NextPage = () => {
  const [open, setOpen] = useState(false); //open modal
  const [OpentermsAndConditions, setTermsAndConditions] = useState(""); //terms and conditions
  const router = useRouter();
  const { data: sessionData, status } = useSession();

  const [providers, setProviders] = useState<Record<
    LiteralUnion<BuiltInProviderType, string>,
    ClientSafeProvider
  > | null>();
  const [csrfToken, setCsrfToken] = useState<string>("");

  useEffect(() => {
    if (sessionData) {
      void router.push("/dashboard");
    }
  }, [sessionData]);

  useEffect(() => {
    void getProviders()
      .then((providers) => setProviders(providers))
      .catch((err) => console.log(err));
    void getCsrfToken()
      .then((token) => setCsrfToken(token ?? ""))
      .catch((err) => console.log(err));
  }, []);

  if (status === "loading" || status === "authenticated") {
    return <Loader />;
  }

  const handleTermsAndConditionsClick = async (
    event:
      | React.ChangeEvent<HTMLInputElement>
      | React.MouseEvent<HTMLAnchorElement, MouseEvent>
  ) => {
    event.preventDefault();

    try {
      // Make API call to fetch terms and conditions
      const response = await fetch(
        "https://taskmate-webapp.vercel.app/api/tnc",
        {
          method: "GET",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to fetch terms and conditions");
      }

      const data = (await response.json()) as { message: string };
      const termsAndConditions = data.message;

      // Set terms and conditions and open modal to display them
      setTermsAndConditions(termsAndConditions);
      setOpen(true);
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <>
      <Head>
        <title>Taskmate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className=" max-w-auto flex min-h-screen items-center justify-center bg-gradient-to-r from-cyan-500 to-blue-500">
        <div className="flex ">
          <div
            className="3x:w-[800px] flex w-96 space-y-7 overflow-hidden rounded-l-2xl bg-gray-300/75 px-6 py-12 shadow-lg lg:w-[600px] 2xl:w-[700px]"
            style={{
              backgroundImage: "url('/bg-login.jpg')",
              backgroundSize: "cover",
              backgroundPosition: "center",
            }}
          />
          <div className="flex max-w-lg space-y-7 overflow-hidden rounded-r-2xl bg-gray-300/75 px-6 py-12 shadow-lg">
            <div>
              <h2 className="mt-5 text-center text-3xl font-bold tracking-tight text-gray-900">
                {" "}
                Create your Account
              </h2>
              <div>
                <p className="mt-2 text-center text-sm text-gray-600">
                  Start planning in seconds, Already have an account?
                  <Link
                    href="/auth/signin"
                    className="font-medium text-indigo-600 hover:text-indigo-500"
                  >
                    {" "}
                    Login here
                  </Link>
                </p>
              </div>

              <form
                className="mx-auto mt-10 max-w-xl sm:mt-5"
                onSubmit={(e) => {
                  e.preventDefault();
                  const form = e.target as HTMLFormElement;
                  const formData = new FormData(form);
                  const data = Object.fromEntries(formData.entries());

                  fetch("/api/signup", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      "X-CSRF-TOKEN": csrfToken,
                    },
                    body: JSON.stringify(data),
                  })
                    .then((res) => {
                      if (!res.ok) {
                        throw new Error("Error creating account");
                      }
                      if (res.ok) {
                        void router.push("/auth/signin").then(() => {
                          alert("Account created successfully");
                        });
                      }
                    })
                    .catch((err) => {
                      alert(err);
                    });
                }}
              >
                <div>
                  <div className="grid grid-cols-2 gap-4">
                    <input
                      name="csrfToken"
                      type="hidden"
                      defaultValue={csrfToken}
                    />
                    <label
                      htmlFor="firstName"
                      className="text-m block font-semibold leading-6 text-gray-900"
                    >
                      Name:
                      <input
                        className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                        name="name"
                        type="text"
                        placeholder="e.g Chen Yu"
                      />
                    </label>
                    <label
                      htmlFor="email"
                      className="grid-col-2 text-m block font-semibold leading-6 text-gray-900"
                    >
                      Email:
                      <input
                        className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                        name="email"
                        type="email"
                        placeholder="name@gmail.com"
                      />
                    </label>
                    <label
                      htmlFor="password"
                      className="text-m block font-semibold leading-6 text-gray-900"
                    >
                      Password:
                      <input
                        className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                        name="password"
                        type="password"
                        placeholder="Password"
                      />
                    </label>
                    <label
                      htmlFor="confirmPassword"
                      className="text-m block font-semibold leading-6 text-gray-900"
                    >
                      Confirm Password:
                      <input
                        className="relative block w-full rounded-t-md border-0 py-1.5 px-1.5 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                        name="confirmPassword"
                        type="password"
                        placeholder="Confirm Password"
                      />
                    </label>
                    {/* Segregation between credential and social */}
                  </div>
                  <div className="relative m-3 flex items-center ">
                    <div className="flex-grow border-t border-gray-600"></div>
                    <span className="mx-4 flex-shrink text-gray-600">
                      Or register with
                    </span>
                    <div className="flex-grow border-t border-gray-600"></div>
                  </div>

                  {/* Social Registration */}
                  <div className="flex items-center justify-between">
                    {Object.values(providers ?? {})
                      .filter((provider) => provider.name !== "Credentials")
                      .map((provider) => {
                        const Logo = providerLogos[provider.name]!;
                        return (
                          <button
                            key={provider.name}
                            className="flex w-32 items-center justify-center gap-2 rounded-md border bg-white px-4 py-2 shadow hover:bg-gray-300/50"
                            onClick={() =>
                              void signIn(provider.id, {
                                callbackUrl: "/dashboard",
                              })
                            }
                          >
                            <Logo className="text-indigo-800" />
                            {provider.name}
                          </button>
                        );
                      })}
                  </div>
                  <label
                    htmlFor="remember-me"
                    className="ml-2 mt-4 block text-xs text-gray-900"
                  >
                    By signing up, you are creating a TaskMate account, and you
                    agree to TaskMate&apos;s{" "}
                    <Link
                      className=" text-blue-500 underline hover:text-indigo-600"
                      href="#"
                      onClick={(e) => {
                        void handleTermsAndConditionsClick(e);
                      }}
                    >
                      Terms and Condition
                    </Link>
                  </label>
                  <div className="align-center flex justify-center font-semibold">
                    <button
                      className="mt-3 flex w-full justify-center rounded-md bg-indigo-600 py-2 px-3 text-sm font-semibold text-white hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                      type="submit"
                    >
                      Create an account
                    </button>
                  </div>
                </div>
              </form>
              {/* modal */}
              <Transition.Root show={open} as={Fragment}>
                <Dialog as="div" className="relative z-10" onClose={setOpen}>
                  <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                  >
                    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
                  </Transition.Child>

                  <div className="fixed inset-0 z-10 overflow-y-auto">
                    <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                      <Transition.Child
                        as={Fragment}
                        enter="ease-out duration-300"
                        enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                        enterTo="opacity-100 translate-y-0 sm:scale-100"
                        leave="ease-in duration-200"
                        leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                        leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                      >
                        <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8  sm:w-full sm:max-w-5xl sm:p-6 ">
                          <div>
                            <div className="mt-3 text-center sm:mt-5">
                              <Dialog.Title
                                as="h3"
                                className="text-base font-semibold leading-6 text-gray-900"
                              >
                                Terms and Conditions
                              </Dialog.Title>

                              <div className="mt-2">
                                <p className="text-start text-sm text-gray-500">
                                  {OpentermsAndConditions}
                                </p>
                              </div>
                            </div>
                          </div>
                          <div className="mt-5 sm:mt-6">
                            <button
                              type="button"
                              className="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                              onClick={() => setOpen(false)}
                            >
                              Close
                            </button>
                          </div>
                        </Dialog.Panel>
                      </Transition.Child>
                    </div>
                  </div>
                </Dialog>
              </Transition.Root>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Register;
